{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","fetchTodolistsTC","createAsyncThunk","_","a","rejectWithValue","res","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","param","changeTodolistFilterAC","todoIndex","findIndex","f","filter","entityStatus","setTodolistsAC","map","extraReducers","builder","addCase","fulfilled","splice","unshift","todolistsReducer","fetchTasksTC","items","removeTaskTC","p","addTaskTC","resultCode","task","todoListID","updateTaskTC","getState","tasks","find","t","console","warn","apiModel","deadline","description","priority","startDate","domainModel","setTasksAC","forEach","m","taskIndex","tasksReducer","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","catch","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b09565d6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3398b972-8bdb-4d4f-b98d-d3cabc5051ef'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state: InitialStateType,action: PayloadAction<{value: boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n\r\n    }\r\n)\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// actions\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState as InitialStateType,\r\n    reducers: {\r\n        setAppStatusAC(state: InitialStateType, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state: InitialStateType, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state: InitialStateType, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({value: true}));\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk(\r\n    \"todoList/fetchTodolistsTC\",\r\n    async (_, {dispatch,rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            let res = await todolistsAPI.getTodolists()\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n            return {todolists: res.data}\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\nexport const removeTodolistTC = createAsyncThunk(\r\n    \"todoList/removeTodolistTC\",\r\n    async (todolistId: string, {dispatch,rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        try {\r\n            let res = await  todolistsAPI.deleteTodolist(todolistId)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTodolistTC = createAsyncThunk(\r\n    \"todoList/addTodolistTC\",\r\n    async (title: string, {dispatch,rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            let res = await todolistsAPI.createTodolist(title)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk(\r\n    \"todoList/changeTodolistTitleTC\",\r\n    async (param: {id: string, title: string}, {dispatch,rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            await todolistsAPI.updateTodolist(param.id, param.title)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.id,title: param.title}\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"todo-list-reducer\",\r\n    initialState: initialState as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state: Array<TodolistDomainType>, action: PayloadAction<{\r\n            id: string,\r\n            filter: FilterValuesType\r\n        }>) {\r\n            let todoIndex = state.findIndex(f => f.id === action.payload.id)\r\n            state[todoIndex].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state: Array<TodolistDomainType>, action: PayloadAction<{\r\n            id: string,\r\n            status: RequestStatusType\r\n        }>) {\r\n            let todoIndex = state.findIndex(f => f.id === action.payload.id)\r\n            state[todoIndex].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state: Array<TodolistDomainType>, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(f => ({...f, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n\r\n\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(removeTodolistTC.fulfilled,(state,action)=>{\r\n            let todoIndex = state.findIndex(f => f.id === action.payload.id)\r\n            if (todoIndex > -1) {\r\n                state.splice(todoIndex, 1)\r\n            }\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled,(state,action)=>{\r\n            return action.payload.todolists.map(f => ({...f, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled,(state,action)=>{\r\n            let todoIndex = state.findIndex(f => f.id === action.payload.id)\r\n            state[todoIndex].title = action.payload.title\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled,(state,action)=> {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n\r\n// actions\r\n\r\n\r\nexport const {\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n\r\n// thunks\r\n\r\n\r\n\r\n// types\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {\r\n    addTodolistTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\r\n    \"task/fetchTasksTC\",\r\n    async (todolistId: string, {dispatch}) => {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        return {items: res.data.items, todolistId}\r\n    }\r\n)\r\n\r\nexport const removeTaskTC = createAsyncThunk(\r\n    \"task/removeTaskTC\",\r\n    async (p: { taskId: string, todolistId: string }, {dispatch}) => {\r\n        const res = await todolistsAPI.deleteTask(p.todolistId, p.taskId)\r\n        return {taskId: p.taskId, todolistId: p.todolistId}\r\n    })\r\n\r\n\r\nexport const addTaskTC = createAsyncThunk(\r\n    \"task/addTaskTC\",\r\n    async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            let res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task, todoListID: param.todolistId}\r\n                // const action = addTaskAC({task})\r\n                // dispatch(action)\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n        // .catch((error) => {\r\n        //\r\n        // })\r\n\r\n    })\r\n\r\n\r\nexport const updateTaskTC = createAsyncThunk(\r\n    \"task/updateTaskTC\",\r\n    async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, {\r\n        dispatch,\r\n        getState,\r\n        rejectWithValue\r\n    }) => {\r\n        const state = getState() as AppRootStateType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...param.domainModel\r\n        }\r\n\r\n        let res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return {taskId: param.taskId, model: param.domainModel, todolistId: param.todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (error) {\r\n            // @ts-ignore\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"task-reducer\",\r\n    initialState: initialState as TasksStateType,\r\n    reducers: {\r\n        setTasksAC(state: TasksStateType, action: PayloadAction<{ tasks: TaskType[], todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(m => {\r\n                state[m.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.items\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId].filter(f => f.id !== action.payload.taskId)\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListID].unshift(action.payload.task)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            let tasks = state[action.payload.todolistId]\r\n            let taskIndex = tasks.findIndex(f => f.id === action.payload.taskId)\r\n            if (taskIndex > -1) {\r\n                tasks[taskIndex] = {...tasks[taskIndex], ...action.payload.model}\r\n            }\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// actions\r\n\r\nexport const {setTasksAC} = slice.actions\r\n\r\n// thunks\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({\r\n            taskId: id,\r\n            domainModel: {\r\n                status\r\n            }\r\n            ,\r\n            todolistId\r\n        })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({\r\n            taskId: id,\r\n            domainModel: {\r\n                title: newTitle\r\n            }\r\n            ,\r\n            todolistId\r\n        })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                  todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configure} from \"@storybook/react\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}